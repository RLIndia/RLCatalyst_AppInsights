- name: AWS CloudFormation "Deploy CloudFormation Stack" Action for GitHub Actions
  uses: aws-actions/aws-cloudformation-github-deploy@v1.0.3
AWSTemplateFormatVersion: 2010-09-09
Resources:
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import sys
          import datetime
          from datetime import date
          from datetime import timedelta
          now = datetime.datetime.utcnow() 
          end = datetime.datetime(year=now.year, month=now.month, day=now.day) 
          start = date.today() - timedelta(days=1)
          start = start.strftime('%Y-%m-%d') 
          end = end.strftime('%Y-%m-%d')
          def lambda_handler(event, context):
               client = boto3.client('ce')
               response = client.get_cost_and_usage(
                   TimePeriod={
                        'Start': start,
                         'End':  end
                        },
               Granularity='DAILY',
               Filter={
                 'And': [
                    {'Dimensions': {
                                     'Key': 'LINKED_ACCOUNT',
                                     'Values': ["484479102124"]

                                     }},
                    {'Dimensions': {
                                     'Key': 'REGION',
                                     'Values': ["us-east-1"]
                                   }},
                    {'Tags': { 
                               'Key': 'app_name', 
                               'Values': ["ECommerce","Greatbags_IDE","Payments","Research_Gateway","Travel_Portal","University_portal"]
                                   }}          
                                  ]
                                 },
               GroupBy=[
                {
                  'Type': 'DIMENSION',
                  'Key': 'SERVICE'
                 },
                {
                  'Type': 'TAG',
                  'Key': 'app_name'
                 },
        
                ],
               Metrics=["UnblendedCost"],
               )
               result = client.get_cost_and_usage(
               TimePeriod={
                   'Start': start,
                   'End':  end
                 },
               Granularity='DAILY',
               Filter={
                 'And': [
                    {'Dimensions': {
                                    'Key': 'LINKED_ACCOUNT',
                                    'Values': ["484479102124"]

                                 }},
                    {'Dimensions': {
                                    'Key': 'REGION',
                                    'Values': ["us-east-1"]
                                  }},
                  { 'Not': 
                     {'Tags': { 
                               'Key': 'app_name', 
                               'Values': ["ECommerce","Greatbags_IDE","Payments","Research_Gateway","Travel_Portal","University_portal"]
                              }}},
        
                             ]
                            },
               GroupBy=[
                 {
                   'Type': 'DIMENSION',
                   'Key': 'SERVICE'
                   },
                 {
                   'Type': 'DIMENSION',
                   'Key': 'LINKED_ACCOUNT'
                  }
        
                  ],
               Metrics=["UnblendedCost"],
               )
               return response,result
        
          
        
      FunctionName:
        Ref: LambdaFuncName
      Handler: index.lambda_handler
      Runtime: python3.8
      Timeout: 800
      Role: !GetAtt IAMRole.Arn

  LambdaFunction2:
    Type: 'AWS::Lambda::Function'
    Properties:
      Environment:
        Variables:
          apiURL: !Sub https://${APIGatewayRestAPI}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentName}
      Code:
        ZipFile: |
          import json
          import os
          from botocore.vendored import requests
          def lambda_handler(event, context):
              # TODO implement
              api_url = os.environ.get('apiURL')
              URL = api_url
              headers_test = {"authorizationToken":"allow"}
              r = requests.get(URL,headers = headers_test)
              return {
                  'statusCode': 200,
                  'body': json.dumps("THIS IS A TEST RESPONSE FROM API_Lambda FUNCTION: "+r.text)
              }

        
      FunctionName:
        Ref: LambdaFuncName2
      Handler: index.lambda_handler
      Runtime: python3.8
      Timeout: 800
      Role: !GetAtt IAMRole.Arn 

  LambdaFunction1:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          var AWS = require('aws-sdk');
          exports.handler =  function(event, context, callback) {
            var token = event.authorizationToken;
            switch (token) {
               case 'allow':
                 callback(null, generatePolicy('user', 'Allow', event.methodArn));
                 break;
               case 'deny':
                 callback(null, generatePolicy('user', 'Deny', event.methodArn));
                 break;
               case 'unauthorized':
                 callback("Unauthorized");   // Return a 401 Unauthorized response
                 break;
               default:
                 callback("Error: Invalid token"); // Return a 500 Invalid token response
                }
           };


          var generatePolicy = function(principalId, effect, resource) {
            var authResponse = {};
    
            authResponse.principalId = principalId;
            if (effect && resource) {
              var policyDocument = {};
              policyDocument.Version = '2012-10-17'; 
              policyDocument.Statement = [];
              var statementOne = {};
              statementOne.Action = 'execute-api:Invoke'; 
              statementOne.Effect = effect;
              statementOne.Resource = resource;
              policyDocument.Statement[0] = statementOne;
              authResponse.policyDocument = policyDocument;
             }
    
    
            authResponse.context = {
                "stringKey": "stringval",
                "numberKey": 123,
                "booleanKey": true
            };
            return authResponse;
          }

        
      FunctionName:
        Ref: LambdaFuncName1
      Handler: index.handler
      Runtime: nodejs12.x
      Role: !GetAtt IAMRole.Arn

  APIGatewayRestAPI:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name:
        Ref: APIName
    DependsOn:
      - LambdaFunction

  RestApiAuthorizerRole:
     Type: 'AWS::IAM::Role'
     Properties:
       AssumeRolePolicyDocument:
         Version: 2012-10-17
         Statement:
           - Effect: Allow
             Principal:
               Service:
                 - apigateway.amazonaws.com
             Action:
              - 'sts:AssumeRole'
       Path: /
       Policies:
        - PolicyName: lambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:invokeFunction
                Resource: !GetAtt
                  - LambdaFunction1
                  - Arn

  RestApiAuthorizer:
    Type: 'AWS::ApiGateway::Authorizer'
    Properties:
      AuthorizerCredentials: !GetAtt 
        - RestApiAuthorizerRole
        - Arn
      AuthorizerResultTtlInSeconds: '300'
      AuthorizerUri: !Join 
        - ''
        - - 'arn:aws:apigateway:'
          - !Ref 'AWS::Region'
          - ':lambda:path/2015-03-31/functions/'
          - !GetAtt 
           - LambdaFunction1
           - Arn
          - /invocations
      Type: TOKEN
      IdentitySource: method.request.header.authorizationToken
      Name: api-authorizer
      RestApiId: !Ref APIGatewayRestAPI

  APIGatewayMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !GetAtt APIGatewayRestAPI.RootResourceId
      HttpMethod: GET
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref RestApiAuthorizer
      MethodResponses:
        - StatusCode: 200
      Integration:
        Type: AWS
        IntegrationResponses:
          - StatusCode: 200
        IntegrationHttpMethod: POST
        Uri: !Sub
          - >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
          - LambdaFuncNameArn: !GetAtt LambdaFunction.Arn
    DependsOn:
      -  APIGatewayRestAPI
  APIGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      StageName:
        Ref: EnvironmentName
    DependsOn:
      - APIGatewayMethod

  APIGatewayPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGatewayRestAPI}/*/GET/

    DependsOn:
      - APIGatewayDeployment
  IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
                - 'apigateway.amazonaws.com'
                
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: Policy_api-lambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                  - 'servicecatalog:*'
                  - 'lambda:*'
                  - 'ce:*'
                Resource: '*'
   

Parameters:
  LambdaFuncName:
    Type: String
    Default: api-cost-demo
    Description: Give the lambda function Name which has to be integrated to the API Gateway
  APIName:
    Type: String
    Default: API_api-lambda-cost-demo
    Description:  Give the Rest Api name
  EnvironmentName:
    Type: String
    Default: Prod
  LambdaFuncName1:
    Type: String
    Default: Auth-lambda-demo-cost
    Description: Give the Authorization lambda function name 
  LambdaFuncName2:
    Type: String
    Default: call-api-demo-cost
    Description: Give the lambda function name which will pass API_URL
Outputs:
  apiGatewayInvokeURL:
    Value: !Sub https://${APIGatewayRestAPI}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentName}
